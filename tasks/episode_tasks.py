# tasks/episode_tasks.py
import os
from crewai import Task
from config import SERIES_TITLE, INITIAL_STORY_PROMPT, CHARACTERS

# Import all agents
from agents.story_agents import storyline_agent, script_writer_agent
from agents.production_agents import production_agent
from agents.post_production_agents import compiler_agent, youtube_agent

def create_crew_tasks(episode_id: int, episode_path: str):
    """Creates and returns a list of all tasks for the episode creation process."""

    story_context = (
        f"This is for Episode {episode_id} of the series '{SERIES_TITLE}'. "
        f"The initial premise is: {INITIAL_STORY_PROMPT}. "
        f"The main characters are: {CHARACTERS}. "
        "What should happen in this episode, continuing the story?"
    )
    
    task_storyline = Task(
        description=(
            f"Develop the plot for Episode {episode_id}. Use your memory tool to check what happened "
            "in previous episodes and ensure a smooth continuation. The plot should focus on a specific "
            "event or emotional milestone in Mtuthuko's journey. It should be concise but detailed "
            "enough for the scriptwriter."
        ),
        expected_output=(
            f"A detailed plot summary for Episode {episode_id}, including key events, character development, "
            "and the overall emotional arc. This will be the direct input for the scriptwriter."
        ),
        agent=storyline_agent
    )

    task_script = Task(
        description=(
            "Based on the provided plot from the storyline agent, write a complete 5-minute anime script. "
            "The script must be formatted with clear scene headings (e.g., 'SCENE 1 - SHACK INTERIOR - NIGHT'), "
            "character names, dialogue, and action descriptions. Also include notes on character emotions "
            "(e.g., 'Mtuthuko (voice tired, but determined)')."
        ),
        expected_output="A full script file as a single block of text. This script will be used by all production agents.",
        context=[task_storyline],
        agent=script_writer_agent
    )
    
    task_production = Task(
        description=(
            "Read the entire script and generate ALL necessary assets. For EACH scene, use the video tool. "
            "For EACH line of dialogue, use the voice tool. For key actions or mood changes, use the sound tool. "
            "Be meticulous and follow the script exactly. You must generate an asset for every part of the script."
        ),
        expected_output="A confirmation message for each generated asset (video scene, voice line, sound effect), "
                        "confirming they are saved in temporary files.",
        context=[task_script],
        agent=production_agent
    )

    task_compile = Task(
        description=(
            f"Take all the temporary asset files generated by the production agent and compile them into a final "
            f"video file. The final output file must be named 'episode_{episode_id}.mp4' and saved in the "
            f"'{episode_path}' directory."
        ),
        expected_output=f"The full path to the final compiled video file: '{os.path.join(episode_path, f'episode_{episode_id}.mp4')}'.",
        context=[task_production],
        agent=compiler_agent
    )

    task_upload = Task(
        description=(
            f"1. Take the final compiled video file and upload it to YouTube. The title must be "
            f"'{SERIES_TITLE} - Episode {episode_id}'. The description should be a brief, engaging summary "
            f"of the episode's plot, derived from the initial storyline task.\n"
            f"2. After a successful upload, you MUST create a concise summary of THIS episode's plot.\n"
            f"3. Use the memory tool to SAVE this summary to the long-term memory to be used for the next episode. "
            f"The input to the memory tool should ONLY be the summary text, nothing else."
        ),
        expected_output=(
            f"A final report containing the YouTube Video ID and a confirmation that the "
            f"Episode {episode_id} summary was successfully saved to memory."
        ),
        context=[task_compile, task_storyline],
        agent=youtube_agent
    )
    
    return [task_storyline, task_script, task_production, task_compile, task_upload]